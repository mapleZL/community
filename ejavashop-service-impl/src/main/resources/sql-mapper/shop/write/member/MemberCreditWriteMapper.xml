<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ejavashop.dao.shop.write.member.MemberCreditWriteDao">
	<resultMap id="MemberCreditResult" type="com.ejavashop.entity.member.MemberCredit">
			<result property="id" column="id" />
			<result property="quota" column="quota" />
			<result property="used" column="used" />
			<result property="surplus" column="surplus" />
			<result property="state" column="state" />
			<result property="expireDate" column="expire_date" />
			<result property="hasSettled" column="has_settled" />
			<result property="cycle" column="cycle" />
			<result property="source" column="source" />
			<result property="createId" column="create_id" />
			<result property="createName" column="create_name" />
			<result property="createTime" column="create_time" />
			<result property="updateId" column="update_id" />
			<result property="updateName" column="update_name" />
			<result property="updateTime" column="update_time" />
			<result property="memberId" column="member_id" />
	</resultMap>
	
	<!-- <select id="get" parameterType="Integer" resultMap="MemberCreditResult">
		select
		   *
		from `member_credit`
		where `id` = #{id}
	</select>
	
	<select id="getByMemberId" parameterType="Integer" resultMap="MemberCreditResult">
		select
		   *
		from `member_credit`
		where `member_id` = #{memberId} order by id desc limit 1
	</select>
	
	<select id="getCount" parameterType="java.util.Map"
		resultType="java.lang.Integer">
		select count(1) from `member_credit` t1
		<include refid="whereConditions" />
	</select> -->
	
	<delete id="del">
        delete from `member_credit` where `id` = #{id}
	</delete>
	
	<!-- <select id="page" resultType="com.ejavashop.entity.member.MemberCredit">
		SELECT
			(
				SELECT
					name
				FROM
					member
				WHERE
					id = t1.member_id
			)AS member_name,
			(
				SELECT
					balance
				FROM
					member
				WHERE
					id = t1.member_id
			)AS member_balance,
			t1.state as status,
			t1.*
		FROM
			`member_credit` t1
		<include refid="whereConditions" />
		order by id
		<if test="size != null and size &gt; 0">limit #{start},#{size}</if>
	</select>
	
	<select id="list" resultType="com.ejavashop.entity.member.MemberCredit">
		select * from `member_credit` t1
		order by id
	</select> -->
	
	<!-- 查询条件 -->
	<sql id="whereConditions">
		where 1=1
		<trim  suffixOverrides="," >
			<if test="id != null and id !=''"  > and `id`= #{id}</if>
			<if test="quota != null and quota !=''"  > and `quota`= #{quota}</if>
			<if test="q_quota_start != null and q_quota_start !=''"  > 
				<![CDATA[ and `quota` >= #{q_quota_start}]]> 
			</if>
			<if test="q_quota_end != null and q_quota_end !=''"  > 
				<![CDATA[ and `quota` <= #{q_quota_end}]]> 
			</if>
			<if test="used != null and used !=''"  > and `used`= #{used}</if>
			<if test="surplus != null and surplus !=''"  > and `surplus`= #{surplus}</if>
			<if test="state != null and state !=''"  > and `state`= #{state}</if>
			<if test="q_state != null and q_state !=''"  > and `state`= #{q_state}</if>
			<if test="expireDate != null and expireDate !=''"  > and `expire_date`= #{expireDate}</if>
			<if test="q_expireDate != null and q_expireDate !=''"  > and TO_DAYS(expire_date)= TO_DAYS(#{q_expireDate})</if>
			<if test="hasSettled != null and hasSettled !=''"  > and `has_settled`= #{hasSettled}</if>
			<if test="cycle != null and cycle !=''"  > and `cycle`= #{cycle}</if>
			<if test="source != null and source !=''"  > and `source`= #{source}</if>
			<if test="createId != null and createId !=''"  > and `create_id`= #{createId}</if>
			<if test="createName != null and createName !=''"  > and `create_name`= #{createName}</if>
			<if test="createTime != null and createTime !=''"  > and `create_time`= #{createTime}</if>
			<if test="updateId != null and updateId !=''"  > and `update_id`= #{updateId}</if>
			<if test="updateName != null and updateName !=''"  > and `update_name`= #{updateName}</if>
			<if test="updateTime != null and updateTime !=''"  > and `update_time`= #{updateTime}</if>
			<if test="memberId != null and memberId !=''"  > and `member_id`= #{memberId}</if>
			<if test="q_memberId != null and q_memberId !=''"  > and `member_id`= #{q_memberId}</if>
			<if test="in_members != null and in_members !=''"  > and `member_id` in(${in_members})</if>
		</trim>
	</sql>
	
	<update id="update" parameterType="com.ejavashop.entity.member.MemberCredit">
        update `member_credit` 
    	<set>
			<if test="id != null">`id`= #{id},</if>
			<if test="quota != null">`quota`= #{quota},</if>
			<if test="used != null">`used`= #{used},</if>
			<if test="surplus != null">`surplus`= #{surplus},</if>
			<if test="state != null">`state`= #{state},</if>
			<if test="expireDate != null">`expire_date`= #{expireDate},</if>
			<if test="hasSettled != null">`has_settled`= #{hasSettled},</if>
			<if test="cycle != null">`cycle`= #{cycle},</if>
			<if test="source != null">`source`= #{source},</if>
			<if test="createId != null">`create_id`= #{createId},</if>
			<if test="createName != null">`create_name`= #{createName},</if>
			<if test="createTime != null">`create_time`= #{createTime},</if>
			<if test="updateId != null">`update_id`= #{updateId},</if>
			<if test="updateName != null">`update_name`= #{updateName},</if>
			<if test="updateTime != null">`update_time`= #{updateTime},</if>
			<if test="memberId != null">`member_id`= #{memberId}</if>
	    </set>
        where `id` = #{id}
	</update>
	
	<insert id="save" parameterType="com.ejavashop.entity.member.MemberCredit" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into 
		`member_credit`
		(
			
			`quota`,
			`used`,
			`surplus`,
			`state`,
			`expire_date`,
			`has_settled`,
			`cycle`,
			`source`,
			`create_id`,
			`create_name`,
			`create_time`,
			`update_id`,
			`update_name`,
			`update_time`,
			`member_id`
		)
		values
		(
			
			#{quota},
			#{used},
			#{surplus},
			#{state},
			#{expireDate},
			#{hasSettled},
			#{cycle},
			#{source},
			#{createId},
			#{createName},
			#{createTime},
			#{updateId},
			#{updateName},
			#{updateTime},
			#{memberId}
		)
	</insert>
	
</mapper>